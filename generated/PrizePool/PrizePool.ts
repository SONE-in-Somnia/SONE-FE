// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositDeadlineUpdated extends ethereum.Event {
  get params(): DepositDeadlineUpdated__Params {
    return new DepositDeadlineUpdated__Params(this);
  }
}

export class DepositDeadlineUpdated__Params {
  _event: DepositDeadlineUpdated;

  constructor(event: DepositDeadlineUpdated) {
    this._event = event;
  }

  get oldDepositDeadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDepositDeadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DrawTimeUpdated extends ethereum.Event {
  get params(): DrawTimeUpdated__Params {
    return new DrawTimeUpdated__Params(this);
  }
}

export class DrawTimeUpdated__Params {
  _event: DrawTimeUpdated;

  constructor(event: DrawTimeUpdated) {
    this._event = event;
  }

  get oldDrawTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDrawTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WinnerDrawn extends ethereum.Event {
  get params(): WinnerDrawn__Params {
    return new WinnerDrawn__Params(this);
  }
}

export class WinnerDrawn__Params {
  _event: WinnerDrawn;

  constructor(event: WinnerDrawn) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PrizePool extends ethereum.SmartContract {
  static bind(address: Address): PrizePool {
    return new PrizePool("PrizePool", address);
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositDeadline(): BigInt {
    let result = super.call(
      "depositDeadline",
      "depositDeadline():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_depositDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositDeadline",
      "depositDeadline():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositTimes(param0: Address): BigInt {
    let result = super.call("depositTimes", "depositTimes(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_depositTimes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositTimes",
      "depositTimes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposits(param0: Address): BigInt {
    let result = super.call("deposits", "deposits(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_deposits(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposits", "deposits(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawTime(): BigInt {
    let result = super.call("drawTime", "drawTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_drawTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("drawTime", "drawTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawWinner(): Address {
    let result = super.call("drawWinner", "drawWinner():(address)", []);

    return result[0].toAddress();
  }

  try_drawWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall("drawWinner", "drawWinner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWinRate(user: Address): BigInt {
    let result = super.call("getWinRate", "getWinRate(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_getWinRate(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getWinRate", "getWinRate(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWinner(): Address {
    let result = super.call("getWinner", "getWinner():(address)", []);

    return result[0].toAddress();
  }

  try_getWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getWinner", "getWinner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  index(param0: BigInt): Address {
    let result = super.call("index", "index(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_index(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("index", "index(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isWinner(account: Address): boolean {
    let result = super.call("isWinner", "isWinner(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isWinner(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWinner", "isWinner(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizePoolManager(): Address {
    let result = super.call(
      "prizePoolManager",
      "prizePoolManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_prizePoolManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizePoolManager",
      "prizePoolManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", "totalDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterest(): BigInt {
    let result = super.call("totalInterest", "totalInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterest",
      "totalInterest():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeightedTickets(): BigInt {
    let result = super.call(
      "totalWeightedTickets",
      "totalWeightedTickets():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalWeightedTickets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeightedTickets",
      "totalWeightedTickets():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  v(): Address {
    let result = super.call("v", "v():(address)", []);

    return result[0].toAddress();
  }

  try_v(): ethereum.CallResult<Address> {
    let result = super.tryCall("v", "v():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weightedTickets(param0: Address): BigInt {
    let result = super.call(
      "weightedTickets",
      "weightedTickets(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_weightedTickets(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "weightedTickets",
      "weightedTickets(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winner(): Address {
    let result = super.call("winner", "winner():(address)", []);

    return result[0].toAddress();
  }

  try_winner(): ethereum.CallResult<Address> {
    let result = super.tryCall("winner", "winner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldProtocolAddress(): Address {
    let result = super.call(
      "yieldProtocolAddress",
      "yieldProtocolAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_yieldProtocolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yieldProtocolAddress",
      "yieldProtocolAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _yieldProtocolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _poolManagerAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _drawDeadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _depositDeadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DrawWinnerCall extends ethereum.Call {
  get inputs(): DrawWinnerCall__Inputs {
    return new DrawWinnerCall__Inputs(this);
  }

  get outputs(): DrawWinnerCall__Outputs {
    return new DrawWinnerCall__Outputs(this);
  }
}

export class DrawWinnerCall__Inputs {
  _call: DrawWinnerCall;

  constructor(call: DrawWinnerCall) {
    this._call = call;
  }
}

export class DrawWinnerCall__Outputs {
  _call: DrawWinnerCall;

  constructor(call: DrawWinnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDepositDeadlineCall extends ethereum.Call {
  get inputs(): UpdateDepositDeadlineCall__Inputs {
    return new UpdateDepositDeadlineCall__Inputs(this);
  }

  get outputs(): UpdateDepositDeadlineCall__Outputs {
    return new UpdateDepositDeadlineCall__Outputs(this);
  }
}

export class UpdateDepositDeadlineCall__Inputs {
  _call: UpdateDepositDeadlineCall;

  constructor(call: UpdateDepositDeadlineCall) {
    this._call = call;
  }

  get _newDepositDeadline(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDepositDeadlineCall__Outputs {
  _call: UpdateDepositDeadlineCall;

  constructor(call: UpdateDepositDeadlineCall) {
    this._call = call;
  }
}

export class UpdateDrawTimeCall extends ethereum.Call {
  get inputs(): UpdateDrawTimeCall__Inputs {
    return new UpdateDrawTimeCall__Inputs(this);
  }

  get outputs(): UpdateDrawTimeCall__Outputs {
    return new UpdateDrawTimeCall__Outputs(this);
  }
}

export class UpdateDrawTimeCall__Inputs {
  _call: UpdateDrawTimeCall;

  constructor(call: UpdateDrawTimeCall) {
    this._call = call;
  }

  get _newDrawTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDrawTimeCall__Outputs {
  _call: UpdateDrawTimeCall;

  constructor(call: UpdateDrawTimeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
